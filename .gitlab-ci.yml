default:
  tags:
    - gcp

stages:
  - test
  - build_docker
  - build_singularity

test:
  stage: test
  allow_failure: true  # Allow pipeline to continue even if tests fail
  image: nvidia/cuda:12.8.1-devel-ubuntu22.04

  script:
    - apt update -y
    - apt clean   
    - apt install wget -y
    - apt install python3-pip -y
    - export DEBIAN_FRONTEND=noninteractive
    - export TZ=UTC
    - apt install tzdata -y
    - apt install gcovr -y
    - apt install git -y
    - apt install libeigen3-dev -y
    - apt install libboost-all-dev -y
    - apt install gcc g++ -y
    - apt install cmake -y

    # Manually install CUDA 12.x if needed
    - echo "Checking and installing CUDA 12.x..."
    - wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
    - dpkg -i cuda-keyring_1.1-1_all.deb
    - apt-get update -y
    - apt-get -y install cuda-toolkit-12-8
    - export PATH=/usr/local/cuda/bin:$PATH
    - export CUDADIR=/usr/local/cuda
    - export CXXFLAGS="-I/usr/local/cuda/include $CXXFLAGS"
    - export LDFLAGS="-L/usr/local/cuda/lib64 $LDFLAGS"

    - nvidia-smi

    - rm -rf build deploy  # Clean old build artifacts

    - CUDA_VISIBLE_DEVICES=$CI_RUNNER_ID

    - mkdir build && cd build

    - cmake -DCMAKE_BUILD_TYPE=RELEASE 
            -DSTORMM_ENABLE_CUDA=NO
            -DSTORMM_ENABLE_RDKIT=NO 
            -DSTORMM_ENABLE_TEST_COVERAGE=YES 
            -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/deploy 
            -DCUSTOM_NVCC_THREADS=8 ..
    - make -j
    - make test -j
    - gcovr --xml-pretty --exclude-unreachable-branches --gcov-ignore-parse-errors --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}

    - cmake -DCMAKE_BUILD_TYPE=RELEASE 
            -DSTORMM_ENABLE_CUDA=YES 
            -DSTORMM_ENABLE_RDKIT=NO 
            -DSTORMM_ENABLE_TEST_COVERAGE=YES 
            -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/deploy 
            -DCUSTOM_NVCC_THREADS=8 ..
    - make -j
    - make test -j
    - gcovr --xml-pretty --exclude-unreachable-branches --gcov-ignore-parse-errors --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}

    - make install

    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${CI_PROJECT_DIR}/deploy/lib/
    - export PATH=$PATH:${CI_PROJECT_DIR}/deploy/bin/

    - test -f ${CI_PROJECT_DIR}/deploy/lib/cmake/stormm/STORMMTargets.cmake

    - cd ${CI_PROJECT_DIR}

    - conformer.stormm.cuda --help
    - ffrefine.stormm.cuda --help

  parallel:
    matrix:
      - NEO_TAG: ["gpu"]

  coverage: /^\s*lines:\s*\d+.\d+\%/

  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    paths:
      - build/Testing/Temporary/LastTest.log
      - ${CI_PROJECT_DIR}/build/Testing/Temporary/LastTest.log
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml

build_docker:
  stage: build_docker
  needs: ["test"]
  image: google/cloud-sdk:latest
  before_script:
    - echo $GCP_SERVICE_KEY | base64 -d > gcloud-service-key.json
    - gcloud auth activate-service-account --key-file=gcloud-service-key.json
    - gcloud config set project psivant-data
  script:
    - echo "Building STORMM CUDA image"
    - echo "CI_COMMIT_SHA:" $CI_COMMIT_SHA
    
    # Submit build to Cloud Build
    - |
      gcloud builds submit \
        --project psivant-data \
        --machine-type=e2-highcpu-32 \
        --tag us-docker.pkg.dev/psivant-data/containers/stormm:$CI_COMMIT_SHA \
        --timeout=3h \
        --region us-central1 .

    # Tag as latest based on branch
    - |
        gcloud artifacts docker tags add \
          us-docker.pkg.dev/psivant-data/containers/stormm:$CI_COMMIT_SHA \
          us-docker.pkg.dev/psivant-data/containers/stormm:$CI_COMMIT_BRANCH

    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        gcloud artifacts docker tags add \
          us-docker.pkg.dev/psivant-data/containers/stormm:$CI_COMMIT_SHA \
          us-docker.pkg.dev/psivant-data/containers/stormm:$CI_COMMIT_BRANCH \
          us-docker.pkg.dev/psivant-data/containers/stormm:latest
      fi

  only:
    - development
    - main
    - test_build

build_singularity:
  needs: [build_docker]
  image: docker:24.0.5
  stage: build_singularity
  services:
    - docker:dind
  before_script:
    - |
      cat > /etc/apk/repositories << EOF; $(echo)
      https://dl-cdn.alpinelinux.org/alpine/v$(cut -d'.' -f1,2 /etc/alpine-release)/main/
      https://dl-cdn.alpinelinux.org/alpine/v$(cut -d'.' -f1,2 /etc/alpine-release)/community/
      https://dl-cdn.alpinelinux.org/alpine/edge/testing/
      https://dl-cdn.alpinelinux.org/alpine/edge/community/
      EOF
    - apk update
    - apk add --no-cache curl gnupg python3 singularity
    - curl -O https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar -xzf google-cloud-sdk.tar.gz
    - ./google-cloud-sdk/install.sh
    - rm google-cloud-sdk.tar.gz
    - export PATH="$PATH:$(pwd)/google-cloud-sdk/bin"
    - gcloud auth configure-docker us-docker.pkg.dev -q
    - echo $GCP_SERVICE_KEY | base64 -d > gcloud-service-key.json
    - export GOOGLE_APPLICATION_CREDENTIALS=gcloud-service-key.json
    - gcloud auth activate-service-account --key-file gcloud-service-key.json
    - echo $GCP_SERVICE_KEY | base64 -d > gcloud-service-key.json
    - docker login -u _json_key --password-stdin us-docker.pkg.dev < gcloud-service-key.json
  script:
    - |
      PROJECT_NAME_LOWER=$(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
      docker pull us-docker.pkg.dev/psivant-data/containers/$PROJECT_NAME_LOWER:$CI_COMMIT_SHA
      singularity build "$PROJECT_NAME_LOWER-$CI_COMMIT_BRANCH.sif" docker-daemon://us-docker.pkg.dev/psivant-data/containers/$PROJECT_NAME_LOWER:$CI_COMMIT_SHA
      gsutil cp "$PROJECT_NAME_LOWER-$CI_COMMIT_BRANCH.sif" gs://singularity-images/$CI_PROJECT_NAME/
      gsutil cp "$PROJECT_NAME_LOWER-$CI_COMMIT_BRANCH.sif" gs://cluster-software-prod/images/

  only:
    - development
    - main
    - test_build